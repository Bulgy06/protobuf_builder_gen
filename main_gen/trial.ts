// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: proto/trial.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "trial";

export enum ActStatus {
  ONLINE = 0,
  IDLE = 1,
  INVISIBLE = 2,
  UNRECOGNIZED = -1,
}

export function actStatusFromJSON(object: any): ActStatus {
  switch (object) {
    case 0:
    case "ONLINE":
      return ActStatus.ONLINE;
    case 1:
    case "IDLE":
      return ActStatus.IDLE;
    case 2:
    case "INVISIBLE":
      return ActStatus.INVISIBLE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActStatus.UNRECOGNIZED;
  }
}

export function actStatusToJSON(object: ActStatus): string {
  switch (object) {
    case ActStatus.ONLINE:
      return "ONLINE";
    case ActStatus.IDLE:
      return "IDLE";
    case ActStatus.INVISIBLE:
      return "INVISIBLE";
    case ActStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Post {
  id: string;
  usname: string;
  content: string;
  timestamp: number;
}

export interface User {
  id: string;
  usname: string;
  age: number;
  about: string;
  status: ActStatus;
  postlist: Post[];
  followercount: number;
  email?: string | undefined;
  phone?: string | undefined;
}

export interface Userlist {
  users: User[];
}

function createBasePost(): Post {
  return { id: "", usname: "", content: "", timestamp: 0 };
}

export const Post: MessageFns<Post> = {
  encode(message: Post, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.usname !== "") {
      writer.uint32(18).string(message.usname);
    }
    if (message.content !== "") {
      writer.uint32(26).string(message.content);
    }
    if (message.timestamp !== 0) {
      writer.uint32(32).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Post {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePost();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.usname = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Post {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      usname: isSet(object.usname) ? globalThis.String(object.usname) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: Post): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.usname !== "") {
      obj.usname = message.usname;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Post>, I>>(base?: I): Post {
    return Post.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Post>, I>>(object: I): Post {
    const message = createBasePost();
    message.id = object.id ?? "";
    message.usname = object.usname ?? "";
    message.content = object.content ?? "";
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseUser(): User {
  return {
    id: "",
    usname: "",
    age: 0,
    about: "",
    status: 0,
    postlist: [],
    followercount: 0,
    email: undefined,
    phone: undefined,
  };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.usname !== "") {
      writer.uint32(18).string(message.usname);
    }
    if (message.age !== 0) {
      writer.uint32(24).int32(message.age);
    }
    if (message.about !== "") {
      writer.uint32(34).string(message.about);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    for (const v of message.postlist) {
      Post.encode(v!, writer.uint32(50).fork()).join();
    }
    if (message.followercount !== 0) {
      writer.uint32(56).int32(message.followercount);
    }
    if (message.email !== undefined) {
      writer.uint32(66).string(message.email);
    }
    if (message.phone !== undefined) {
      writer.uint32(74).string(message.phone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.usname = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.about = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.postlist.push(Post.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.followercount = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      usname: isSet(object.usname) ? globalThis.String(object.usname) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      about: isSet(object.about) ? globalThis.String(object.about) : "",
      status: isSet(object.status) ? actStatusFromJSON(object.status) : 0,
      postlist: globalThis.Array.isArray(object?.postlist) ? object.postlist.map((e: any) => Post.fromJSON(e)) : [],
      followercount: isSet(object.followercount) ? globalThis.Number(object.followercount) : 0,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      phone: isSet(object.phone) ? globalThis.String(object.phone) : undefined,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.usname !== "") {
      obj.usname = message.usname;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.about !== "") {
      obj.about = message.about;
    }
    if (message.status !== 0) {
      obj.status = actStatusToJSON(message.status);
    }
    if (message.postlist?.length) {
      obj.postlist = message.postlist.map((e) => Post.toJSON(e));
    }
    if (message.followercount !== 0) {
      obj.followercount = Math.round(message.followercount);
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.phone !== undefined) {
      obj.phone = message.phone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.usname = object.usname ?? "";
    message.age = object.age ?? 0;
    message.about = object.about ?? "";
    message.status = object.status ?? 0;
    message.postlist = object.postlist?.map((e) => Post.fromPartial(e)) || [];
    message.followercount = object.followercount ?? 0;
    message.email = object.email ?? undefined;
    message.phone = object.phone ?? undefined;
    return message;
  },
};

function createBaseUserlist(): Userlist {
  return { users: [] };
}

export const Userlist: MessageFns<Userlist> = {
  encode(message: Userlist, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      User.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Userlist {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(User.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Userlist {
    return { users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => User.fromJSON(e)) : [] };
  },

  toJSON(message: Userlist): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => User.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Userlist>, I>>(base?: I): Userlist {
    return Userlist.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Userlist>, I>>(object: I): Userlist {
    const message = createBaseUserlist();
    message.users = object.users?.map((e) => User.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
